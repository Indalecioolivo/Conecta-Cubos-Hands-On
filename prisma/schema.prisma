generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model lecture {
  id           Int            @id @default(autoincrement())
  title        String         @db.VarChar(255)
  starttime    DateTime?      @db.Time(6)
  endtime      DateTime?      @db.Time(6)
  lecturer_id  Int?
  lecturer     lecturer?      @relation(fields: [lecturer_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  meet_lecture meet_lecture[]
}

model lecturer {
  id        Int       @id @default(autoincrement())
  firstname String    @db.VarChar(255)
  lastname  String    @db.VarChar(255)
  github    String    @db.VarChar(255)
  createdat DateTime? @default(now()) @db.Timestamp(6)
  email     String?   @db.VarChar(255)
  lecture   lecture[]
}

model manager {
  id        String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username  String    @unique @db.VarChar(255)
  firstname String    @db.VarChar(255)
  lastname  String    @db.VarChar(255)
  github    String    @db.VarChar(255)
  createdat DateTime? @default(now()) @db.Timestamp(6)
  email     String?   @db.VarChar(255)
  meet      meet[]
}

model meet {
  id           Int            @id @default(autoincrement())
  name         String?        @db.VarChar(255)
  date         DateTime?      @db.Timestamp(6)
  place        String?        @db.VarChar(255)
  link         String?        @db.VarChar(255)
  createdat    DateTime?      @default(now()) @db.Timestamp(6)
  manager_id   String?        @db.Uuid
  manager      manager?       @relation(fields: [manager_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  meet_lecture meet_lecture[]
}

model meet_lecture {
  id         Int      @id @default(autoincrement())
  meet_id    Int?
  lecture_id Int?
  lecture    lecture? @relation(fields: [lecture_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  meet       meet?    @relation(fields: [meet_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}
